#include <limits>
#include <gtest/gtest.h>
#include <control/lat_controller.h>
#include <control/control_node.h>
#include <cmath>
#include <vector>
#include <iostream>
#include <limits>
#include <fstream>
#include <vector>
#include "Eigen/Dense"

// Include the path
//#include <test/test_data_and_doc/path.h>

using namespace std;

float pathArrayX[1001] = {0,0.17,0.34,0.51,0.68,0.85,1.02,1.19,1.36,1.53,1.7,1.87,2.04,2.21,2.38,2.55,2.72,2.89,3.06,3.23,3.4,3.57,3.74,3.91,4.08,4.25,4.42,4.59,4.76,4.93,5.1,5.27,5.44,5.61,5.78,5.95,6.12,6.29,6.46,6.63,6.8,6.97,7.14,7.31,7.48,7.65,7.82,7.99,8.16,8.33,8.5,8.67,8.84,9.01,9.18,9.35,9.52,9.69,9.86,10.03,10.2,10.37,10.54,10.71,10.88,11.05,11.22,11.39,11.56,11.73,11.9,12.07,12.24,12.41,12.58,12.75,12.92,13.09,13.26,13.43,13.6,13.77,13.94,14.11,14.28,14.45,14.62,14.79,14.96,15.13,15.3,15.47,15.64,15.81,15.98,16.15,16.32,16.49,16.66,16.83,17,17.17,17.34,17.51,17.68,17.85,18.02,18.19,18.36,18.53,18.7,18.87,19.04,19.21,19.38,19.55,19.72,19.89,20.06,20.23,20.4,20.57,20.74,20.91,21.08,21.25,21.42,21.59,21.76,21.93,22.1,22.27,22.44,22.61,22.78,22.95,23.12,23.29,23.46,23.63,23.8,23.97,24.14,24.31,24.48,24.65,24.82,24.99,25.16,25.33,25.5,25.67,25.84,26.01,26.18,26.35,26.52,26.69,26.86,27.03,27.2,27.37,27.54,27.71,27.88,28.05,28.22,28.39,28.56,28.73,28.9,29.07,29.24,29.41,29.58,29.75,29.92,30.09,30.26,30.43,30.6,30.77,30.94,31.11,31.28,31.45,31.62,31.79,31.96,32.13,32.3,32.47,32.64,32.81,32.98,33.15,33.32,33.49,33.66,33.83,34,34.17,34.34,34.51,34.68,34.85,35.02,35.19,35.36,35.53,35.7,35.87,36.04,36.21,36.38,36.55,36.72,36.89,37.06,37.23,37.4,37.57,37.74,37.91,38.08,38.25,38.42,38.59,38.76,38.93,39.1,39.27,39.44,39.61,39.78,39.95,40.12,40.29,40.46,40.63,40.8,40.97,41.14,41.31,41.48,41.65,41.82,41.99,42.16,42.33,42.5,42.67,42.84,43.01,43.18,43.35,43.52,43.69,43.86,44.03,44.2,44.37,44.54,44.71,44.88,45.05,45.22,45.39,45.56,45.73,45.9,46.07,46.24,46.41,46.58,46.75,46.92,47.09,47.26,47.43,47.6,47.77,47.94,48.11,48.28,48.45,48.62,48.79,48.96,49.13,49.3,49.47,49.64,49.81,49.98,50.15,50.32,50.49,50.66,50.83,51,51.17,51.34,51.51,51.68,51.85,52.02,52.19,52.36,52.53,52.7,52.87,53.04,53.21,53.38,53.55,53.72,53.89,54.06,54.23,54.4,54.57,54.74,54.91,55.08,55.25,55.42,55.59,55.76,55.93,56.1,56.27,56.44,56.61,56.78,56.95,57.12,57.29,57.46,57.63,57.8,57.97,58.14,58.31,58.48,58.65,58.82,58.99,59.16,59.33,59.5,59.67,59.84,60.01,60.18,60.35,60.52,60.69,60.86,61.03,61.2,61.37,61.54,61.71,61.88,62.05,62.22,62.39,62.56,62.73,62.9,63.07,63.24,63.41,63.58,63.75,63.92,64.09,64.26,64.43,64.6,64.77,64.94,65.11,65.28,65.45,65.62,65.79,65.96,66.13,66.3,66.47,66.64,66.81,66.98,67.15,67.32,67.49,67.66,67.83,68,68.17,68.34,68.51,68.68,68.85,69.02,69.19,69.36,69.53,69.7,69.87,70.04,70.21,70.38,70.55,70.72,70.89,71.06,71.23,71.4,71.57,71.74,71.91,72.08,72.25,72.42,72.59,72.76,72.93,73.1,73.27,73.44,73.61,73.78,73.95,74.12,74.29,74.46,74.63,74.8,74.97,75.14,75.31,75.48,75.65,75.82,75.99,76.16,76.33,76.5,76.67,76.84,77.01,77.18,77.35,77.52,77.69,77.86,78.03,78.2,78.37,78.54,78.71,78.88,79.05,79.22,79.39,79.56,79.73,79.9,80.07,80.24,80.41,80.58,80.75,80.92,81.09,81.26,81.43,81.6,81.77,81.94,82.11,82.28,82.45,82.62,82.79,82.96,83.13,83.3,83.47,83.64,83.81,83.98,84.15,84.32,84.49,84.66,84.83,85,85.17,85.34,85.51,85.68,85.85,86.02,86.19,86.36,86.53,86.7,86.87,87.04,87.21,87.38,87.55,87.72,87.89,88.06,88.23,88.4,88.57,88.74,88.91,89.08,89.25,89.42,89.59,89.76,89.93,90.1,90.27,90.44,90.61,90.78,90.95,91.12,91.29,91.46,91.63,91.8,91.97,92.14,92.31,92.48,92.65,92.82,92.99,93.16,93.33,93.5,93.67,93.84,94.01,94.18,94.35,94.52,94.69,94.86,95.03,95.2,95.37,95.54,95.71,95.88,96.05,96.22,96.39,96.56,96.73,96.9,97.07,97.24,97.41,97.58,97.75,97.92,98.09,98.26,98.43,98.6,98.77,98.94,99.11,99.28,99.45,99.62,99.79,99.96,100.13,100.3,100.47,100.64,100.81,100.98,101.15,101.32,101.49,101.66,101.83,102,102.17,102.34,102.51,102.68,102.85,103.02,103.19,103.36,103.53,103.7,103.87,104.04,104.21,104.38,104.55,104.72,104.89,105.06,105.23,105.4,105.57,105.74,105.91,106.08,106.25,106.42,106.59,106.76,106.93,107.1,107.27,107.44,107.61,107.78,107.95,108.12,108.29,108.46,108.63,108.8,108.97,109.14,109.31,109.48,109.65,109.82,109.99,110.16,110.33,110.5,110.67,110.84,111.01,111.18,111.35,111.52,111.69,111.86,112.03,112.2,112.37,112.54,112.71,112.88,113.05,113.22,113.39,113.56,113.73,113.9,114.07,114.24,114.41,114.58,114.75,114.92,115.09,115.26,115.43,115.6,115.77,115.94,116.11,116.28,116.45,116.62,116.79,116.96,117.13,117.3,117.47,117.64,117.81,117.98,118.15,118.32,118.49,118.66,118.83,119,119.17,119.34,119.51,119.68,119.85,120.02,120.19,120.36,120.53,120.7,120.87,121.04,121.21,121.38,121.55,121.72,121.89,122.06,122.23,122.4,122.57,122.74,122.91,123.08,123.25,123.42,123.59,123.76,123.93,124.1,124.27,124.44,124.61,124.78,124.95,125.12,125.29,125.46,125.63,125.8,125.97,126.14,126.31,126.48,126.65,126.82,126.99,127.16,127.33,127.5,127.67,127.84,128.01,128.18,128.35,128.52,128.69,128.86,129.03,129.2,129.37,129.54,129.71,129.88,130.05,130.22,130.39,130.56,130.73,130.9,131.07,131.24,131.41,131.58,131.75,131.92,132.09,132.26,132.43,132.6,132.77,132.94,133.11,133.28,133.45,133.62,133.79,133.96,134.13,134.3,134.47,134.64,134.81,134.98,135.15,135.32,135.49,135.66,135.83,136,136.17,136.34,136.51,136.68,136.85,137.02,137.19,137.36,137.53,137.7,137.87,138.04,138.21,138.38,138.55,138.72,138.89,139.06,139.23,139.4,139.57,139.74,139.91,140.08,140.25,140.42,140.59,140.76,140.93,141.1,141.27,141.44,141.61,141.78,141.95,142.12,142.29,142.46,142.63,142.8,142.97,143.14,143.31,143.48,143.65,143.82,143.99,144.16,144.33,144.5,144.67,144.84,145.01,145.18,145.35,145.52,145.69,145.86,146.03,146.2,146.37,146.54,146.71,146.88,147.05,147.22,147.39,147.56,147.73,147.9,148.07,148.24,148.41,148.58,148.75,148.92,149.09,149.26,149.43,149.6,149.77,149.94,150.11,150.28,150.45,150.62,150.79,150.96,151.13,151.3,151.47,151.64,151.81,151.98,152.15,152.32,152.49,152.66,152.83,153,153.17,153.34,153.51,153.68,153.85,154.02,154.19,154.36,154.53,154.7,154.87,155.04,155.21,155.38,155.55,155.72,155.89,156.06,156.23,156.4,156.57,156.74,156.91,157.08,157.25,157.42,157.59,157.76,157.93,158.1,158.27,158.44,158.61,158.78,158.95,159.12,159.29,159.46,159.63,159.8,159.97,160.14,160.31,160.48,160.65,160.82,160.99,161.16,161.33,161.5,161.67,161.84,162.01,162.18,162.35,162.52,162.69,162.86,163.03,163.2,163.37,163.54,163.71,163.88,164.05,164.22,164.39,164.56,164.73,164.9,165.07,165.24,165.41,165.58,165.75,165.92,166.09,166.26,166.43,166.6,166.77,166.94,167.11,167.28,167.45,167.62,167.79,167.96,168.13,168.3,168.47,168.64,168.81,168.98,169.15,169.32,169.49,169.66,169.83,170};
float pathArrayY[1001] = {0,0.131138903,0.260075491,0.386823689,0.511397423,0.633810616,0.754077195,0.872211084,0.988226209,1.102136494,1.213955865,1.323698246,1.431377562,1.537007739,1.640602702,1.742176376,1.841742685,1.939315554,2.03490891,2.128536676,2.220212779,2.309951142,2.397765691,2.483670351,2.567679047,2.649805704,2.730064247,2.808468601,2.885032691,2.959770443,3.032695781,3.10382263,3.173164915,3.240736562,3.306551495,3.370623639,3.43296692,3.493595263,3.552522592,3.609762833,3.66532991,3.719237749,3.771500275,3.822131412,3.871145086,3.918555222,3.964375745,4.00862058,4.051303652,4.092438885,
                     4.132040206,4.170121539,4.206696809,4.241779941,4.27538486,4.307525491,4.33821576,4.367469591,4.395300909,4.42172364,4.446751708,4.470399038,4.492679556,4.513607187,4.533195855,4.551459485,4.568412004,4.584067335,4.598439403,4.611542135,4.623389454,4.633995286,4.643373556,4.651538189,4.65850311,4.664282244,4.668889516,4.672338851,4.674644174,4.67581941,4.675878485,4.674835323,4.672703848,4.669497988,4.665231665,4.659918806,4.653573336,4.646209179,4.63784026,4.628480505,4.618143839,4.606844186,4.594595472,4.581411621,4.567306559,4.552294211,4.536388502,4.519603357,4.501952701,4.483450458,4.464110555,4.443946915,4.422973465,4.401204128,4.378652831,4.355333498,4.331260055,4.306446425,4.280906535,4.254654309,4.227703672,4.20006855,4.171762867,4.142800549,4.11319552,4.082961706,4.052113032,4.020663422,3.988626802,3.956017096,3.92284823,3.88913413,3.854888718,3.820125922,3.784859666,3.749103875,3.712872473,3.676179387,3.639038541,3.601463859,3.563469268,3.525068693,3.486276057,3.447105287,3.407570307,3.367685042,3.327463418,3.286919359,
                     3.246066791,3.204919638,3.163491825,3.121797279,3.079849923,3.037663682,2.995252482,2.952630248,2.909810905,2.866808378,2.823636591,2.78030947,2.736840941,2.693244927,2.649535354,2.605726147,2.561831232,2.517864532,2.473839974,2.429771482,2.385672981,2.341558396,2.297441653,2.253336676,2.209257391,2.165217721,2.121231594,2.077312933,2.033475663,1.98973371,1.946100999,1.902591455,1.859219002,1.815997566,1.772941071,1.730063444,1.687378608,1.64490049,1.602643013,1.560620103,1.518845685,1.477333685,1.436098026,1.395152635,1.354511435,1.314188353,1.274197314,1.234552241,1.195267061,1.156355699,1.117832078,1.079710126,1.042003765,1.004726922,0.967893522,0.93151749,0.89561275,0.860193228,0.825272848,0.790865536,0.756985217,0.723645816,0.690861258,0.658645468,0.627012371,0.595975891,0.565549955,0.535748487,0.506585412,0.478074655,0.450230142,0.423065796,0.396595544,0.370833311,0.34579302,0.321488598,0.29793397,0.275143059,0.253129793,0.231908095,0.21149189,0.191895105,0.173131663,0.155215489,0.13816051,0.121980649,0.106689832,0.092301983,0.078831029,0.066290894,0.054695503,0.04405878,0.034394652,0.025717043,0.018039878,0.011377082,0.005742581,0.001150298,-0.002387497,-0.004875305,-0.006327359,-0.006758014,-0.006181622,-0.004612539,-0.002065117,0.001446288,0.005907324,0.011303635,0.017620869,0.024844671,0.032960688,0.041954564,0.051811948,0.062518483,0.074059817,0.086421596,0.099589465,0.113549072,0.12828606,0.143786078,0.16003477,0.177017783,0.194720764,0.213129357,0.232229209,0.252005967,0.272445275,0.293532781,0.31525413,0.337594969,0.360540942,0.384077698,0.40819088,0.432866137,0.458089112,0.483845454,0.510120807,0.536900818,0.564171133,0.591917398,0.620125258,0.648780361,0.677868352,0.707374876,0.737285581,0.767586112,0.798262116,0.829299237,0.860683123,0.89239942,0.924433772,0.956771828,0.989399232,1.02230163,1.05546467,1.088873996,1.122515254,1.156374092,1.190436155,1.224687088,1.259112539,1.293698152,1.328429575,1.363292453,1.398272432,1.433355159,1.468526278,1.503771437,1.539076282,1.574426458,1.609807612,1.645205389,1.680605436,1.715993398,1.751354923,1.786675655,1.821941241,1.857137327,1.892249559,1.927263583,1.962165045,1.996939592,2.031572868,2.066050521,2.100358196,2.134481539,2.168406197,2.202117816,2.23560204,2.268844518,2.301830894,2.334546815,2.366977926,2.399109875,2.430928306,2.462418866,2.493567201,2.524358957,2.55477978,2.584815316,2.614451212,2.643673112,2.672466664,2.700817514,2.728711306,2.756133689,2.783070306,2.809506805,2.835428832,2.860822033,2.885672053,2.909964539,2.933685137,2.956819493,2.979353252,3.001272062,3.022563323,3.043220324,3.063237587,3.082609632,3.101330981,3.119396156,3.136799678,3.15353607,3.169599851,3.184985545,3.199687672,3.213700754,3.227019313,3.23963787,3.251550946,3.262753064,3.273238745,3.283002509,3.29203888,3.300342377,3.307907524,3.314728841,3.32080085,3.326118072,3.33067503,3.334466244,3.337486236,3.339729527,3.34119064,3.341864096,3.341744415,3.340826121,3.339103733,3.336571775,3.333224767,3.329057231,3.324063688,3.31823866,3.311576669,3.304072236,3.295719882,3.286514129,3.276449499,3.265520514,3.253721694,3.241047561,3.227492637,3.213051443,3.197718502,3.181488333,3.16435546,3.146314403,3.127359684,3.107485825,3.086687347,3.064958771,3.04229462,3.018689414,2.994137886,2.968664391,2.942353198,2.915295801,2.887583697,2.859308378,2.830561342,2.801434084,2.772018098,2.742404879,2.712685923,2.682952726,2.653296782,2.623809586,2.594582634,2.565707421,2.537275442,2.509378192,2.482107166,2.455553861,2.42980977,2.404966389,2.381115214,2.358347739,2.336755459,2.316429871,2.297462469,2.279944748,2.263968203,2.24962433,2.237004624,2.22620058,2.217303693,2.210405459,2.205597372,2.202970928,2.202617623,2.20462895,2.209096406,2.216111486,2.225765684,2.238150497,2.253357419,2.271477945,2.292603571,2.316825792,2.344236102,2.374925998,2.408986975,2.446510527,2.48758815,2.532311339,2.580771589,2.633060396,2.689269254,2.74948966,2.813813107,2.882331091,2.955135108,3.032313794,3.113852019,3.19960396,3.289415461,3.383132364,3.480600515,3.581665756,3.686173931,3.793970884,3.904902459,4.018814499,4.135552847,4.254963349,4.376891846,4.501184184,4.627686205,4.756243753,4.886702672,5.018908806,5.152707997,5.287946091,5.424468931,5.562122359,5.700752221,5.840204359,5.980324617,6.120958839,6.261952869,6.40315255,6.544403726,6.685552241,6.826443938,6.96692466,7.106840253,7.246036558,7.384359421,7.521654684,7.657768191,7.792545787,7.925833314,8.057476616,8.187321537,8.315213921,8.440999611,8.564524451,8.685634284,8.804174955,8.919992307,9.032932183,9.142840428,9.249562885,9.352945397,9.452833808,9.549073963,9.641511704,9.729992875,9.814363321,9.894468884,9.970155408,10.04127778,10.10783273,10.16992958,10.22768077,10.28119875,10.33059595,10.37598481,10.41747777,10.45518727,10.48922573,10.51970561,10.54673934,10.57043936,10.59091811,10.60828802,10.62266153,10.63415108,10.64286911,10.64892806,10.65244037,10.65351846,10.65227479,10.64882179,10.6432719,10.63573755,10.62633119,10.61516524,10.60235216,10.58800438,10.57223433,10.55515446,10.5368772,10.51751499,10.49718027,10.47598548,10.45404305,10.43146543,10.40836505,10.38485435,10.36104576,10.33705173,10.3129847,10.28895709,10.26508136,10.24146994,10.21823526,10.19548977,10.1733459,10.15191609,10.13131278,10.1116484,10.0930354,10.07558622,10.05941329,10.04462904,10.03134593,10.01967638,10.00973283,10.00162773,9.995462958,9.991252962,9.98896895,9.988581822,9.990062478,9.993381818,9.998510742,10.00542015,10.01408094,10.02446402,10.03654029,10.05028064,10.06565597,10.08263719,10.10119519,10.12130089,10.14292516,10.16603893,10.19061308,10.21661851,10.24402614,10.27280685,10.30293154,10.33437113,10.3670965,10.40107856,10.4362882,10.47269634,10.51027386,10.54899167,10.58882067,10.62973176,10.67169583,10.7146838,10.75866655,10.803615,10.84950003,10.89629255,10.94396347,10.99248367,11.04182406,11.09195554,11.14284901,11.19447538,11.24680553,11.29981038,11.35346081,11.40772774,11.46258206,11.51799467,11.57393647,11.63037836,11.68729125,11.74464602,11.80241359,11.86056486,11.91907071,11.97790206,12.0370298,12.09642484,12.15605806,12.21590039,12.2759227,12.33609591,12.39639091,12.45677861,12.5172299,12.57771569,12.63820687,12.69867434,12.75908902,12.81942178,12.87964354,12.9397252,12.99963765,13.0593518,13.11883855,13.17806879,13.23701342,13.29564336,13.35392949,13.41184271,13.46935394,13.52643406,13.58305398,13.6391846,13.69479681,13.74986152,13.80434963,13.85823204,13.91147965,13.96406335,14.01595406,14.06712266,14.11754006,14.16717716,14.21600486,14.26399406,14.31111566,14.35734056,14.40263966,14.44698386,14.49034407,14.53269117,14.57399607,14.61422967,14.65336287,14.69136658,14.72821169,14.76386909,14.7983097,14.83150441,14.86342413,14.89403974,14.92332216,14.95124228,14.97777101,15.00287925,15.02655189,15.04881319,15.06969432,15.08922646,15.10744077,15.12436843,15.14004061,15.15448846,15.16774318,15.17983592,15.19079785,15.20066015,15.20945399,15.21721053,15.22396095,15.22973642,15.2345681,15.23848717,15.2415248,15.24371215,15.2450804,15.24566072,15.24548428,15.24458225,15.24298579,15.24072609,15.2378343,15.2343416,15.23027916,15.22567816,15.22056975,15.21498511,15.20895541,15.20251182,15.19568551,15.18850765,15.18100942,15.17322197,15.16517649,15.15690413,15.14843608,15.1398035,15.13103757,15.12216944,15.1132303,15.10425131,15.09526364,15.08629847,15.07738696,15.06856028,15.05984961,15.05128611,15.04290096,15.03472532,15.02679036,15.01912726,15.01176719,15.00474131,14.99808062,14.99180254,14.98590103,14.98036775,14.97519436,14.97037252,14.96589389,14.96175013,14.95793289,14.95443383,14.95124462,14.94835691,14.94576236,14.94345262,14.94141937,14.93965425,14.93814893,14.93689505,14.9358843,14.93510831,14.93455875,14.93422728,14.93410555,14.93418524,14.93445798,14.93491545,14.9355493,14.93635119,14.93731278,14.93842573,14.93968169,14.94107233,14.9425893,14.94422426,14.94596888,14.9478148,14.94975369,14.95177721,14.95387702,14.95604477,14.95827212,14.96055073,14.96287227,14.96522838,14.96761073,14.97001098,14.97242078,14.9748318,14.97723569,14.97962411,14.98198872,14.98432118,14.98661314,14.98885627,14.99104223,14.99316267,14.99520925,14.99717363,14.99904747,15.00082261,15.00249575,15.00406881,15.00554401,15.00692352,15.00820954,15.00940428,15.01050993,15.01152867,15.01246271,15.01331424,15.01408545,15.01477855,15.01539572,15.01593916,15.01641107,15.01681364,15.01714907,15.01741955,15.01762727,15.01777444,15.01786324,15.01789587,15.01787453,15.01780142,15.01767871,15.01750863,15.01729334,15.01703507,15.01673598,
                     15.01639829,15.01602419,15.01561587,15.01517553,15.01470536,15.01420756,15.01368432,15.01313784,15.01257031,15.01198393,15.01138089,15.01076339,15.01013363,15.00949379,15.00884608,15.00819268,15.0075358,15.00687763,15.00622036,15.00556619,15.00491732,15.00427593,15.00364423,15.00302441,15.00241866,15.00182918,15.00125816,15.00070781,15.00018031,14.99967774,14.99920069,14.99874874,14.99832146,14.9979184,14.99753912,14.99718319,14.99685017,14.99653961,14.99625108,14.99598414,14.99573835,14.99551327,14.99530847,14.99512349,14.99495792,14.99481129,14.99468319,14.99457316,14.99448076,14.99440557,14.99434714,14.99430503,14.9942788,14.99426801,14.99427223,14.99429101,14.99432392,14.99437052,14.99443036,14.99450301,14.99458804,14.99468499,14.99479344,14.99491293,14.99504305,14.99518333,14.99533336,14.99549268,14.99566085,14.99583745,14.99602203,14.99621414,14.99641336,14.99661924,14.99683135,14.99704924,14.99727247,14.99750062,14.99773323,14.99796986,14.99821009,14.99845347,14.99869956,14.99894792,14.99919812,14.99944971,14.99970226,14.99995532,15.00020846,15.00046124,15.00071322,15.00096396,15.00121302,15.00145996,15.00170435,15.00194574,15.00218369,15.00241777,15.00264754,15.00287256,15.00309239,15.00330658,15.00351471,15.00371633,15.00391101,15.00409829,15.00427776,15.00444896,15.00461145,15.00476481,15.00490858,15.00504233,15.00516563,15.00527802,15.00537908,15.00546837,15.00554544,15.00560985,15.00566117,15.00569896,15.00572278,15.00573219,15.00572675,15.00570602,15.00566956,15.00561694,15.00554772,15.00546144,15.00535769,15.00523601,15.00509597,15.00493714,15.00475906,15.0045613,15.00434343,15.004105,15.00384558,15.00356472,15.00326198,15.00293694,15.00258914,15.00221816,15.00182354,15.00140485,15.00096166,15.00049352,15};


// TEST CASE 1: Arithmatic test for algorithm, refer to "unittest_cases.pdf" in the folder
//  ArimthMatic test case 1
TEST(arithmatic_test_1, ShouldPass)
{
  fusionad::control::lat_controller::Stanley stanley_test_1;
  vector<float> pathX(pathArrayX, pathArrayX + sizeof(pathArrayX)/sizeof(pathArrayX[0]));
  vector<float> pathY(pathArrayY, pathArrayY + sizeof(pathArrayY)/sizeof(pathArrayY[0]));

  // Set the position of the vehical at (-1, -1)
  Eigen::Vector2f veh_pos(-1,-1);

  float veh_theta = 1.5708;
  float veh_velocity = 1.2;

  int wpIndex = 0;

  float k_hard = 7;

  //ASSERT_EQ(pathX.size() , pathY.size());

  size_t path_size = pathX.size();

  float computed_steering_1 = stanley_test_1.computeSteeringAngle(veh_pos, pathX, pathY,
                                           veh_velocity, wpIndex,
                                           veh_theta, k_hard, path_size);

  float tc1_solution = -0.11307;

  ASSERT_NEAR(tc1_solution, computed_steering_1, std::abs(tc1_solution)*0.02);
}

// TEST CASE 2: Arithmatic test for algorithm, refer to "unittest_cases.pdf" in the folder
//  ArimthMatic test case 2
TEST(arithmatic_test_2, ShouldPass)
{
  fusionad::control::lat_controller::Stanley stanley_test_2;
  vector<float> pathX(pathArrayX, pathArrayX + sizeof(pathArrayX)/sizeof(pathArrayX[0]));
  vector<float> pathY(pathArrayY, pathArrayY + sizeof(pathArrayY)/sizeof(pathArrayY[0]));

  // Set the position of the vehical at (10.2, 4.5)
  Eigen::Vector2f veh_pos(10.2,4.5);

  float veh_theta = 0.136;
  float veh_velocity = 1.2;

  int wpIndex = 60;

  float k_hard = 7;

  //ASSERT_EQ(pathX.size() , pathY.size());

  size_t path_size = pathX.size();

  float computed_steering_2 = stanley_test_2.computeSteeringAngle(veh_pos, pathX, pathY,
                                           veh_velocity, wpIndex,
                                           veh_theta, k_hard, path_size);

  float tc2_solution = -0.29211;

  ASSERT_NEAR(tc2_solution, computed_steering_2, std::abs(tc2_solution)*0.02);
}

// TEST CASE 3: Arithmatic test for algorithm, refer to "unittest_cases.pdf" in the folder
//  ArimthMatic test case 3
TEST(arithmatic_test_3, ShouldPass)
{
  fusionad::control::lat_controller::Stanley stanley_test_3;
  vector<float> pathX(pathArrayX, pathArrayX + sizeof(pathArrayX)/sizeof(pathArrayX[0]));
  vector<float> pathY(pathArrayY, pathArrayY + sizeof(pathArrayY)/sizeof(pathArrayY[0]));

  // Set the position of the vehical at (86, 10.2)
  Eigen::Vector2f veh_pos(87.3,8.5);

  float veh_theta = 0.5934;
  float veh_velocity = 1.2;

  int wpIndex = 514;

  float k_hard = 7;

  //ASSERT_EQ(pathX.size() , pathY.size());

  size_t path_size = pathX.size();

  float computed_steering_3 = stanley_test_3.computeSteeringAngle(veh_pos, pathX, pathY,
                                           veh_velocity, wpIndex,
                                           veh_theta, k_hard, path_size);

  float tc3_solution = -0.36652;

  ASSERT_NEAR(tc3_solution, computed_steering_3,std::abs(tc3_solution)*0.02);
}

// TEST CASE 4: NaN case testing, function should return -69 for error catching
//  NaN test case 1
TEST(NaN_test_case_1, ShouldPass)
{
  fusionad::control::lat_controller::Stanley stanley_test_4;
  vector<float> pathX(pathArrayX, pathArrayX + sizeof(pathArrayX)/sizeof(pathArrayX[0]));
  vector<float> pathY(pathArrayY, pathArrayY + sizeof(pathArrayY)/sizeof(pathArrayY[0]));

  // Set the position of the vehical at (86, 10.2)
  Eigen::Vector2f veh_pos(86,10.2);

  float veh_theta = std::numeric_limits<double>::quiet_NaN();
  float veh_velocity = 1.2;

  int wpIndex = 515;

  float k_hard = 7;

  //ASSERT_EQ(pathX.size() , pathY.size());

  size_t path_size = pathX.size();

  float computed_steering_4 = stanley_test_4.computeSteeringAngle(veh_pos, pathX, pathY,
                                           veh_velocity, wpIndex,
                                           veh_theta, k_hard, path_size);

  float tc4_solution = -69;

  ASSERT_EQ(tc4_solution, computed_steering_4);
}

// TEST CASE 5: Arithmatic test for algorithm, refer to "unittest_cases.pdf" in the folder
//  ArimthMatic test case 4
TEST(arithmatic_test_4, ShouldPass)
{
  fusionad::control::lat_controller::Stanley stanley_test_5;
  vector<float> pathX(pathArrayX, pathArrayX + sizeof(pathArrayX)/sizeof(pathArrayX[0]));
  vector<float> pathY(pathArrayY, pathArrayY + sizeof(pathArrayY)/sizeof(pathArrayY[0]));

  // Set the position of the vehical at (93.33, 10.7)
  Eigen::Vector2f veh_pos(93.33,10.7);

  float veh_theta = 0.01;
  float veh_velocity = 1.2;

  int wpIndex = 549;

  float k_hard = 7;

  //ASSERT_EQ(pathX.size() , pathY.size());

  size_t path_size = pathX.size();

  float computed_steering_5 = stanley_test_5.computeSteeringAngle(veh_pos, pathX, pathY,
                                           veh_velocity, wpIndex,
                                           veh_theta, k_hard, path_size);

  float tc5_solution = -0.2671;

  ASSERT_NEAR(tc5_solution, computed_steering_5, std::abs(tc5_solution)*0.02);
}

// TEST CASE 6: 0 Gain test for algorithm, refer to "unittest_cases.pdf" in the folder
//  gain test case 1
TEST(gain_test_1, ShouldPass)
{
  fusionad::control::lat_controller::Stanley stanley_test_6;
  vector<float> pathX(pathArrayX, pathArrayX + sizeof(pathArrayX)/sizeof(pathArrayX[0]));
  vector<float> pathY(pathArrayY, pathArrayY + sizeof(pathArrayY)/sizeof(pathArrayY[0]));

  // Set the position of the vehicle at (93.33, 10.7)
  Eigen::Vector2f veh_pos(93.33,10.7);

  float veh_theta = 0.01;
  float veh_velocity = 1.2;

  int wpIndex = 549;

  // Setting gain to 0
  float k_hard = 0;

  //ASSERT_EQ(pathX.size() , pathY.size());

  size_t path_size = pathX.size();

  float computed_steering_6 = stanley_test_6.computeSteeringAngle(veh_pos, pathX, pathY,
                                           veh_velocity, wpIndex,
                                           veh_theta, k_hard, path_size);

  float tc6_solution = 0.0035004;

  ASSERT_NEAR(tc6_solution, computed_steering_6, std::abs(tc6_solution)*0.02);
}



int main(int argc, char **argv) {
    //k_soft is implicitly set to zero, algorithm does not account for k soft
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}